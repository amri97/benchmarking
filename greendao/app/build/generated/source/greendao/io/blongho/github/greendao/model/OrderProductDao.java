package io.blongho.github.greendao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_order_product".
*/
public class OrderProductDao extends AbstractDao<OrderProduct, Void> {

    public static final String TABLENAME = "tb_order_product";

    /**
     * Properties of entity OrderProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Order = new Property(1, long.class, "order", false, "ORDER");
        public final static Property Product = new Property(2, long.class, "product", false, "PRODUCT");
    }

    private DaoSession daoSession;


    public OrderProductDao(DaoConfig config) {
        super(config);
    }
    
    public OrderProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_order_product\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"ORDER\" INTEGER NOT NULL ," + // 1: order
                "\"PRODUCT\" INTEGER NOT NULL );"); // 2: product
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tb_order_product_ID_DESC ON \"tb_order_product\"" +
                " (\"ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_order_product\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderProduct entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOrder());
        stmt.bindLong(3, entity.getProduct());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderProduct entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOrder());
        stmt.bindLong(3, entity.getProduct());
    }

    @Override
    protected final void attachEntity(OrderProduct entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OrderProduct readEntity(Cursor cursor, int offset) {
        OrderProduct entity = new OrderProduct( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // order
            cursor.getLong(offset + 2) // product
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderProduct entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOrder(cursor.getLong(offset + 1));
        entity.setProduct(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OrderProduct entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OrderProduct entity) {
        return null;
    }

    @Override
    public boolean hasKey(OrderProduct entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
